# SPDX-FileCopyrightText: 2020 Helmholtz Centre for Environmental Research (UFZ)
# SPDX-FileCopyrightText: 2020 Helmholtz-Zentrum Dresden-Rossendorf (HZDR)
#
# SPDX-License-Identifier: Apache-2.0

---

- name: Check whether Redis server is installed.
  ansible.builtin.stat:
    path: "{{ redis_bin }}"
  register: redis_server_installed

- name: Determine initial dry-run.
  ansible.builtin.set_fact:
    is_initial_dryrun: "{{ ansible_check_mode and not redis_server_installed.stat.exists }}"

- name: Check Redis version.
  ansible.builtin.command:
    cmd: "{{ redis_bin }} -v"
  register: redis_version_installed
  when: redis_server_installed.stat.exists
  changed_when: false
  check_mode: no

- name: Determine version.
  ansible.builtin.set_fact:
    installed_redis_server_version: "{{ redis_version_installed.stdout | regex_search('^Redis server v=(\\d+\\.\\d+\\.\\d+)', '\\1') | first }}"
  when: redis_server_installed.stat.exists

- name: Output version strings.
  ansible.builtin.debug:
    msg: "Installed version: {{ installed_redis_server_version }}, version to be installed: {{ redis_version }}."
  when: installed_redis_server_version is defined

- name: Check if version strings are equal.
  ansible.builtin.set_fact:
    is_redis_server_version_equal: "{{ installed_redis_server_version is version(redis_version, operator='==', strict=True) }}"
  when: redis_server_installed.stat.exists

- name: Install dependencies.
  become: yes
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ redis_dependencies }}"

- name: Create Redis Group.
  become: yes
  ansible.builtin.group:
    name: "{{ redis_group }}"
    system: yes
    state: present

- name: Add Redis System User.
  become: yes
  ansible.builtin.user:
    name: "{{ redis_user }}"
    group: "{{ redis_group }}"
    system: yes
    create_home: no

- name: Continue if Redis is not installed or versions are not equal.
  when: not redis_server_installed.stat.exists or not is_redis_server_version_equal
  block:
    - name: Download and extract redis-{{ redis_version }}
      become: yes
      ansible.builtin.unarchive:
        src: "{{ redis_download_url }}"
        dest: "{{ redis_build_dir | dirname }}"
        mode: 0755
        owner: root
        group: root
        remote_src: yes

    - name: Build Redis.
      become: yes
      community.general.make:
        chdir: "{{ redis_build_dir }}"
      when: not is_initial_dryrun

    - name: Install Redis.
      become: yes
      community.general.make:
        chdir: "{{ redis_build_dir }}"
        target: install
      when: not is_initial_dryrun
      notify:
        - Restart Redis Server
        - Restart Redis Sentinel

    - name: Remove current Redis Build Directory.
      ansible.builtin.file:
        path: "{{ redis_build_dir }}"
        state: absent
      when: redis_version is defined

- name: Create Redis Server Service file.
  become: yes
  ansible.builtin.template:
    src: "redis-server.service.j2"
    dest: "{{ redis_server_service_file }}"
    mode: 0640
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  notify:
    - Restart Redis Server

- name: Create Redis Sentinel Service file.
  become: yes
  ansible.builtin.template:
    src: "redis-sentinel.service.j2"
    dest: "{{ redis_sentinel_service_file }}"
    mode: 0640
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  notify:
    - Restart Redis Sentinel

- name: Create Redis Configuration Directory.
  become: yes
  ansible.builtin.file:
    path: "{{ redis_configuration_dir }}"
    state: directory
    mode: 0755
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"


- name: Add Ansible begin marker for backwards compatibility
  ansible.builtin.lineinfile:
    line: "# BEGIN ANSIBLE MANAGED BLOCK"
    path: "{{ item }}"
    insertbefore: BOF
    create: true
    mode: "0600"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  loop:
    - "{{ redis_sentinel_configuration_file }}"
    - "{{ redis_server_configuration_file }}"

- name: Add Ansible end marker for backwards compatibility
  ansible.builtin.lineinfile:
    line: "# END ANSIBLE MANAGED BLOCK"
    path: "{{ item }}"
    insertbefore: "# Generated by CONFIG REWRITE"
    create: true
    mode: "0600"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  loop:
    - "{{ redis_sentinel_configuration_file }}"
    - "{{ redis_server_configuration_file }}"

- name: Configure Redis and Sentinel.
  become: yes
  ansible.builtin.blockinfile:
    block: "{{ lookup('ansible.builtin.template', item.template_file) }}"
    path: "{{ item.path }}"
    insertbefore: "# Generated by CONFIG REWRITE"
    create: true
    mode: 0600
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  notify: Restart Redis Server
  loop:
    - { template_file: "redis.conf.j2", path: "{{ redis_server_configuration_file }}" }
    - { template_file: "sentinel.conf.j2", path: "{{ redis_sentinel_configuration_file }}" }

- name: Create Redis Lib Directory.
  become: yes
  ansible.builtin.file:
    path: "{{ redis_lib_dir }}"
    state: directory
    mode: 0770
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"

- name: Create Redis Log Directory.
  become: yes
  ansible.builtin.file:
    path: "{{ redis_log_dir }}"
    state: directory
    mode: 0770
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"

- name: Register Redis Server Service.
  become: yes
  ansible.builtin.service:
    name: "{{ redis_server_service_name }}"
    state: started
    enabled: yes
  when: not is_initial_dryrun
  notify: Restart Redis Server

- name: Register Redis Sentinel Service.
  become: yes
  ansible.builtin.service:
    name: "{{ redis_sentinel_service_name }}"
    state: started
    enabled: yes
  when: not is_initial_dryrun
  notify: Restart Redis Sentinel

...
